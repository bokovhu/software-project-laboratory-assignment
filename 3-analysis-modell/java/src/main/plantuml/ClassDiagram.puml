@startuml

skinparam classAttributeIconSize 0
skinparam guillemet false

' ==========
' Interfaces
' ==========

interface Updatable {
    +update (): void
}

' =======
' Classes
' =======

class Timer <<singleton>> {
    +tick (): void
    +add (updatable: Updatable): void
    +remove (updatable: Updatable): void
}

class Level {
    +removeAnimal (animal: Animal): void
}

class Tile {
    +life: int
    +isFragile: boolean
    +isExit: boolean
    +accept (animal: Animal): boolean
    +damage (): void
    +spawnWave (wave: Wave): void
    +pushwave (wave: Wave): void
}

abstract class Animal {
    +startLeading (leader: Animal): void
    +stopLeading (): void
    +kill (): void
    +moveTo (targetTile: Tile): void
    +use (item: Item): void
    +collideWithAnimal (animal: Animal): void
    +collideWithPanda (panda: Animal): void
    +collideWithOrangutan (orangutan: Animal): void
    +goToSleep(where: Tile): void
    +jump(): void
    +scare(): void
    +update(): void
}

abstract class Item {
    +use (user: Animal): void
    +update (): void
}

abstract class Panda {
    +isAsleep: boolean
    +collideWithAnimal (animal: Animal): void
    +collideWithOrangutan (orangutan: Animal): void
    +update (): void
}

class SleepyPanda {
    +goToSleep(where: Tile): void
}

class JumpyPanda {
    +jump(): void
}

class CowardPanda {
    +scare(): void
}

class Orangutan {
    +collideWithAnimal (animal: Animal): void
}

class Couch {
    -isTaken: boolean
    +use (user: Animal): void
    +update (): void
}

class GameMachine {
    +update (): void
}

class ChocolateVendingMachine {
    +update (): void
}

class Wardrobe {
    +use (user: Animal): void
}

abstract class Wave {
    +hit(animal: Animal): void
}

class SleepyWave{
    +hit(animal: Animal): void
}

class BeepWave{
    +hit(animal: Animal): void
}

class JumpyWave{
    +hit(animal: Animal): void
}
' ===========
' Inheritance
' ===========

Updatable <|.. Animal
Updatable <|.. Item

Animal <|-- Panda
Panda<|-- SleepyPanda
Panda<|-- JumpyPanda
Panda<|-- CowardPanda
Animal <|-- Orangutan

Item <|-- Couch
Item <|-- GameMachine
Item <|-- ChocolateVendingMachine
Item <|-- Wardrobe

Wave<|-- JumpyWave
Wave<|-- SleepyWave
Wave<|-- BeepWave

' ============
' Compositions
' ============

Updatable "0..n" *-- Timer : -updatables
Tile "0..n" *-- Level : -tiles
Animal "0..n" *-- Level : -animals

' ============
' Associations
' ============

Tile "0..n" -- Tile : +neighbours

Tile <-- Animal : -standingOn
Animal "0..1" -- Tile : -currentAnimal

Animal "0..1" <-- Animal : -leaderAnimal
Animal "0..1" <-- Animal : -guidedAnimal

Tile <-- Item : -placedOn
Item "0..1" -- Tile : -placedItem

Tile <-- Wave : -origin

Wave <.. Tile
Tile <-- Level : +startTile
Tile <-- Level : +exitTile

Animal <.. Item
Item <.. Animal

Wardrobe <-- Wardrobe : -otherWardrobe

Level <-- Tile : -level

Animal <.. Wave

@enduml